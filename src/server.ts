import dotenv from "dotenv";
dotenv.config();
import mongoose from "mongoose";
import bodyParser from "body-parser";
import express, { Express } from "express";
import cors from "cors";  
import path from "path"; 

// üü¢ ◊ô◊¶◊ô◊®◊™ ◊î◊©◊®◊™ **◊ú◊§◊†◊ô ◊õ◊ú ◊©◊ô◊û◊ï◊© ◊ë- app**
const app = express();

// üü¢ Middleware - ◊ò◊ô◊§◊ï◊ú ◊ë◊ë◊ß◊©◊ï◊™ JSON
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// üü¢ CORS - ◊û◊™◊ü ◊î◊®◊©◊ê◊ï◊™ ◊ó◊ô◊¶◊ï◊†◊ô◊ï◊™
app.use(cors({
    origin: ["http://localhost:5174"], // üõ†Ô∏è ◊ú◊î◊™◊ê◊ô◊ù ◊ú◊õ◊™◊ï◊ë◊™ ◊©◊ú ◊î◊§◊®◊ï◊†◊ò
    methods: ["GET", "POST", "PUT", "DELETE"],
    credentials: true,
}));

// üü¢ ◊î◊®◊©◊ê◊ï◊™ ◊õ◊ú◊ú◊ô◊ï◊™ ◊ú◊õ◊ú ◊î◊†◊™◊ô◊ë◊ô◊ù
app.use((req, res, next) => {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "*");
    res.header("Access-Control-Allow-Methods", "*");
    next();
});

// üü¢ ◊ô◊ô◊ë◊ï◊ê ◊†◊™◊ô◊ë◊ô◊ù (Routes) ◊ê◊ó◊®◊ô ◊ô◊¶◊ô◊®◊™ `app`
import postsRoute from "./routes/posts_routes";
import commentsRoute from "./routes/comments_routes";
import authRoutes from "./routes/auth_routes";
import userRoutes from "./routes/user_routes";
import { authMiddleware } from "./controllers/auth_controller";

// üü¢ ◊ó◊ô◊ë◊ï◊® ◊î◊†◊™◊ô◊ë◊ô◊ù ◊ú◊©◊®◊™
app.use("/api/auth/login", authRoutes);
app.use("/api/posts", postsRoute);
app.use("/api/comments", commentsRoute);
app.use("/api/users", authMiddleware, userRoutes);
app.use("/api/auth", authRoutes);

// üü¢ ◊î◊ï◊°◊§◊™ ◊†◊™◊ô◊ë ◊ú◊ß◊ë◊¶◊ô◊ù ◊°◊ò◊ò◊ô◊ô◊ù (◊ú◊û◊©◊ú ◊™◊û◊ï◊†◊ï◊™ ◊©◊î◊û◊©◊™◊û◊© ◊û◊¢◊ú◊î)
app.use("/uploads", express.static(path.join(__dirname, "../uploads")));

// üü¢ ◊î◊í◊ì◊®◊ï◊™ Swagger ◊ú◊™◊ô◊¢◊ï◊ì ◊î-API
import swaggerJsDoc from "swagger-jsdoc";
import swaggerUI from "swagger-ui-express";

const options = {
    definition: {
        openapi: "3.0.0",
        info: {
            title: "Web Dev 2025 REST API",
            version: "1.0.0",
            description: "REST server including authentication using JWT",
        },
        servers: [{ url: "http://localhost:3000" }],
    },
    apis: ["./src/routes/*.ts"],
};

const specs = swaggerJsDoc(options);
app.use("/api-docs", swaggerUI.serve, swaggerUI.setup(specs));

// üü¢ ◊ó◊ô◊ë◊ï◊® ◊ú◊û◊°◊ì ◊î◊†◊™◊ï◊†◊ô◊ù MongoDB
const db = mongoose.connection;
db.on("error", (error) => console.error("‚ùå MongoDB Connection Error:", error));
db.once("open", () => console.log("‚úÖ Connected to database"));

// üü¢ ◊î◊§◊¢◊ú◊™ ◊î◊©◊®◊™ ◊¢◊ù ◊î◊™◊ó◊ë◊®◊ï◊™ ◊ú◊û◊°◊ì ◊î◊†◊™◊ï◊†◊ô◊ù
const initApp = () => {
    return new Promise<Express>((resolve, reject) => {
        if (!process.env.DB_CONNECT) {
            reject("‚ùå DB_CONNECT is not defined in .env file");
        } else {
            mongoose
                .connect(process.env.DB_CONNECT)
                .then(() => {
                    console.log("‚úÖ Successfully connected to MongoDB");
                    resolve(app);
                })
                .catch((error) => {
                    console.error("‚ùå Failed to connect to MongoDB:", error);
                    reject(error);
                });
        }
    });
};

export default initApp;
